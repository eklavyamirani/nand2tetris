// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=address[3], out=notAddress3);
    Not(in=address[4], out=notAddress4);
    Not(in=address[5], out=notAddress5);

    // RAM 0
    And4Way(a=notAddress5, b=notAddress4, c=notAddress3, d=load, out=sel0);
    RAM8(in=in, load=sel0, address=address[0..2], out=out0);

    // RAM 1
    And4Way(a=notAddress5, b=notAddress4, c=address[3], d=load, out=sel1);
    RAM8(in=in, load=sel1, address=address[0..2], out=out1);

    // RAM 2
    And4Way(a=notAddress5, b=address[4], c=notAddress3, d=load, out=sel2);
    RAM8(in=in, load=sel2, address=address[0..2], out=out2);

    // RAM 3
    And4Way(a=notAddress5, b=address[4], c=address[3], d=load, out=sel3);
    RAM8(in=in, load=sel3, address=address[0..2], out=out3);

    // RAM 4
    And4Way(a=address[5], b=notAddress4, c=notAddress3, d=load, out=sel4);
    RAM8(in=in, load=sel4, address=address[0..2], out=out4);

    // RAM 5
    And4Way(a=address[5], b=notAddress4, c=address[3], d=load, out=sel5);
    RAM8(in=in, load=sel5, address=address[0..2], out=out5);

    // RAM 6
    And4Way(a=address[5], b=address[4], c=notAddress3, d=load, out=sel6);
    RAM8(in=in, load=sel6, address=address[0..2], out=out6);

    // RAM 7
    And4Way(a=address[5], b=address[4], c=address[3], d=load, out=sel7);
    RAM8(in=in, load=sel7, address=address[0..2], out=out7);

    // MUX
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[3..5], out=out);
}