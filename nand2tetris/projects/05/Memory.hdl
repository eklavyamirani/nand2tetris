// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // It is RAM access if the MSB of address is 0.
    Not(in=address[14], out=isRAMAccess);
    And(a=isRAMAccess, b=load, out=isRAMLoad);

    RAM16K(in=in, load=isRAMLoad, address=address[0..13], out=memoryOut);
    Mux16(a=in, b=memoryOut, sel=isRAMAccess, out=outRAM);

    // It is Screen if first and second MSB of address are 10X - 10X
    Not(in=address[13], out=notAddress13);
    And(a=address[14], b=notAddress13, out=isScreenAccess);
    And(a=isScreenAccess, b=load, out=isScreenLoad);
    // HACK simulate ram 8k with a 16k ram
    RAM16K(in=in, load=isScreenLoad, address[0..12]=address[0..12], address[13]=false, out=screenOut);

    Mux16(a=outRAM, b=screenOut, sel=isScreenAccess, out=outScreen);

    // It is keyboard access if it is 0x6000 i.e. 110 0000 0000 0000
    And(a=address[14], b=address[13], out=isKeyboardAccess);
    Or8Way(in=address[0..7], out=isLSB0);
    Or8Way(in[0..4]=address[8..12], in[5]=isLSB0, in[6]=false, in[7]=false, out=isAnyBit1);
    Not(in=isAnyBit1, out=areAllBits0);

    And(a=isKeyboardAccess, b=areAllBits0, out=isValidKeyboardAccess);
    And(a=isValidKeyboardAccess, b=load, out=isKeyboardLoad);
    Register(in=in, load=isKeyboardLoad, out=keyboardOut);
    
    Mux16(a=outScreen, b=keyboardOut, sel=isValidKeyboardAccess, out=output);

    // handle invalid memory access. Output 0
    And(a=isKeyboardAccess, b=isAnyBit1, out=invalidMemoryAccess);
    Mux16(a=output, b=false, sel=invalidMemoryAccess, out=out);
}