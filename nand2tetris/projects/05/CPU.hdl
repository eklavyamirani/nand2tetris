// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A instruction
    Not(in=instruction[15], out=isAinstruction);

    // c instruction
    Not(in=isAinstruction, out=isCinstruction); // replace isCinstructionWith instructin[15]

    // A register
    Mux16(a=registerD, b[0..14]=instruction[0..14], b[15]=false, sel=isAinstruction, out=aRegisterInput);
    And(a=isCinstruction, b=instruction[5], out=cinstLoadRegisterA);
    Or(a=cinstLoadRegisterA, b=isAinstruction, out=loadRegisterA);
    ARegister(in=aRegisterInput, load=loadRegisterA, out=registerA, out[0..14]=addressM);

    // D register
    And(a=isCinstruction, b=instruction[4], out=loadRegisterD);
    DRegister(in=AluOut, load=loadRegisterD, out=registerD);

    // M output - if isCinstruction ^ d3
    And(a=isCinstruction, b=instruction[3], out=writeM, out=isMOut);
    Mux16(a=inM, b=AluOut, sel=isMOut, out=outM);

    // JMP
    // if j3 == 1 and not(ng) and not(zr), set JMP = 1
    // if j2 == 1 and zr == 1, set JMP = 1
    // if j1 == 1 and ng and not(zr), set JMP = 1

    Not(in=ngALU, out=notngALU);
    Not(in=zrALU, out=notzrALU);
    
    // j3
    And(a=instruction[0], b=notngALU, out=j3A);
    And(a=j3A, b=notzrALU, out=j3Out);

    // j2
    And(a=instruction[1], b=zrALU, out=j2Out);

    // j1
    And(a=instruction[2], b=ngALU, out=j1A);
    And(a=j1A, b=notzrALU, out=j1Out);

    // JMP
    Or(a=j1Out, b=j2Out, out=jmpA);
    Or(a=jmpA, b=j3Out, out=JMP);

    // JMP if C inst
    And(a=isCinstruction, b=JMP, out = JMPIfC);

    // C operation
    // y = A if a == 0,
    // y = M if a == 1
    // Not(in=instruction[6], out=notInstruction6);
    // Not(in=instruction[7], out=notInstruction7);
    // Not(in=instruction[8], out=notInstruction8);
    // Not(in=instruction[9], out=notInstruction9);
    // Not(in=instruction[10], out=notInstruction10);
    // Not(in=instruction[11], out=notInstruction11);

    // a = instruction[12]
    Mux16(a=registerA, b=inM, sel=instruction[12], out=selectedRegister);
    
    ALU(x=registerD, y=selectedRegister, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=AluOut, zr=zrALUTemp, ng=ngALUTemp);
    
    // Add clocked chips to avoid unclocked feedback
    DFF(in=zrALUTemp, out=zrALU);
    DFF(in=ngALUTemp, out=ngALU);

    // Program counter
    Inc16(in[0..14]=internalPC, in[15]=false, out=pcAdderOutput);
    Mux16(a=pcAdderOutput, b=false, sel=reset, out=pcResetOutput);
    Not(in=reset, out=notReset);
    And(a=notReset, b=JMPIfC, out=pcJMPSelect);
    Mux16(a=pcResetOutput, b=registerA, b[15]=false, sel=pcJMPSelect, out[0..14]=internalPCTemp);
    Register(in[0..14]=internalPCTemp, in[15]=false, load=true, out[0..14]=internalPC, out[0..14]=pc);
}